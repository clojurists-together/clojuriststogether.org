---
title: "Call for Proposals. June 2025 Member Survey"
date: 2025-03-06T08:30:00+08:00
summary: "We are awarding up to $33K for Q3 2025 Projects"
author: Kathy Davis  
draft: True


---  


Greetings folks!

Clojurists Together is pleased to announce that we are opening our Q3 2025 funding round for Clojure Open Source Projects.  Applications will be accepted through the 25th of July 2025 (midnight Pacific Time). We are looking forward to reviewing your proposals! [More information and the application can be found here.](https://clojuriststogether.org/open-source/)

We will be awarding up to $35,000 USD for up to 6-7 projects. The $2k funding tier is for experimental projects or smaller proposals, whereas the $9k tier is for those that are more established. Projects generally run 3 months, however, the $9K projects can run between 3 and 12 months as needed. We expect projects to start on August 15, 2025.

A BIG THANKS to all our members for your continued support. And we want to encourage you to reach out to your colleagues and companies to join Clojurists Together so that we can fund even more great projects throughout the year.

We surveyed our members again in June to find out what types of initiatives they would like us to focus on for this round of funding. Their responses are summarized below. In particular, it was great to see members' feedback relating to how often they used or referred to developers' work we have funded. Also noted that several of you plan to attend Clojure/Conj, or made your way to SciNoj Light and ReClojure.   <br>

---

## June 2025 Member Survey  

![](<Usage Chart 2-1.jpg>)  

![alt text](<Platforms Used Chart 1.jpg>)  

![alt text](<Imprvements Clojure Chart 3.jpg>)  

![alt text](<Improvements ClojurScript Chart 4.jpg>)


### The Biggest Challenge  
If you were only to name ONE, what is the biggest challenge facing Clojure developers today and how can Clojurists Together support you or your organization in addressing those challenges?

#### Acceptance in the industry.  
- Clojure is still a niche language. It is difficult to justify its use.
- It's still about getting people to take the language(s) seriously in a world that wants everything to be in Python, Java and TypeScript - at least that's how I see the situation.
- I think the biggest challenge is helping Clojure grow and become accessible and well-known in various domains where it is still considered a niche. 
- Friction in developer experience
- Marketing clojure, there are a lot of success stories that fly under the radar.
- There is so much interesting stuff happening but it is siloed within the Clojure community.
- Obscurity. Celebrating and highlighting use of Clojure in the wild.  
- Most LLMs tend to replace Clojure with languages they know better.  

#### New Users.
- Ease of Adoption, Easy installation and set-up for beginners. 
- Getting new people in the community. Specially younger people, and not just male people.  

#### Relevance of clojure in age of AI.  
- Perceived ability for AI to write code is creating skepticism of the value of notation optimized for humans (e.g., Clojure)
- I personally feel behind the curve with all things AI. I'd love to see more tools/docs/videos that demonstrate how to use/build with AI technologies.
- Make the stack traces easier for AI agents.  

#### Other feedback.  
- Stable income, Clojurists Together does great work supporting the community  
- Mobile (iOS/iPadOS) development
- I think we really need a sane, blessed, rails-for-clojure starting point.
- It's not a huge problem, but the dominance of reagent (react classes) does make for some challenges in plugging in to the hook-y broader ecosystem. I don't think I've seen a reagent replacement that has the same refreshingly simple primitives, and I just can't imagine leaving re-frame, ever.
- Fund someone who makes a minimalistic visualization library? oz has been unmaintained for years.  
- We as a company are quite conscious of the fact that many of the libraries that we use are entirely the work of one person, and we fear that this puts them at risk of falling out of maintenance.  I know this is true for a lot of open source software generally, but I think this is a particularly severe risk for the Clojure ecosystem.  
- I think it would be great if we could encourage maintainers to put in place a plan of succession, and to publish this in the project README files.  


### What would you like to be different in the Clojure community in the next 12 months?  

#### Building the Clojure "Brand" to Drive Adoption  
- I would like a stronger "brand" for Clojure that can make it easier to successfully advocate for Clojure(script) in organizations. Technical merits haven't seemed to matter to the leadership of orgs I've worked in, and shiny marketing seems to be the deciding factor.  
- More companies adopting it.    
- Public success story on Clojure AI, ML, DataSciene  
- I would like to see Clojure making some in-roads into breaking out of it's mainstream perception as being an esoteric language, because it really is not at this point.
- At the risk of sounding like broken record, we'd love to see an outreach program that is backed by a good strategy and some measurable outcomes.   
- I'd like the awesome happy-path for Clojure to be common knowledge and well agreed on.
A new/exciting host (jank) with a lot of fresh takes on long standing (Jvm) clojure issues
We need careful community building to initiate collaborations and support systems that will help the growth of open source projects in new domains. A lot of our recent and upcoming efforts at Scicloj have been around that.  

#### Building the Community by Engaging New Users  
- More beginner-friendly local communities  
_ Work on reaching new audiences would be great  
- More newcomers, and be friendlier to more standard approaches as it is inevitable that newcomers will try to approach the language with the experience of mainstream languages  
- Education outreach  

#### More Feedback  
- Tooling support for AI agents  
"Portability is a large, and still growing, potential strong suit of Clojure: especially with the appearance of ClojureDart and Jank-on-the-horizon. I would like ClojureDart to reach language-feature parity, even with the features its crew disdains like multimethod hierarchies. I would like ""cljc"" & clj/cljs/cljd compatibility to be encouraged in potentially-portable projects.   
- If Clojure's Leiningen days were like having a cohesive culture of 4 TV channels chosen by a simple knob, Clojure CLI is like 8,192 channels of cable that most people can't enjoy because they can't work the remote. In place of ""lein test"", ""lein repl"", ""lein package"", there is no standardization. Even Maven provides well-known affordances (package, test, etc). I would like Lein-and-Maven's ease-of-use brought to Clojure CLI without compromising Clojure CLI's direct-from-Git library acquisition, etc., etc.  
- ClojureScript core better supported.  
- I hope we learn how to take advantage of LLM-based technologies in a way that leverages the unique aspects of the language and the REPL-driven workflow. We shouldn’t find ourselves worrying about being left behind by more popular languages and tools. Who knows, maybe we have some unique advantages that could be realised through a different approach to LLM-assisted development.  


### Are there any particular libraries, tools, or projects that are important to you that you would like to see supported?  (In order of mentions):
3: CIDER,SciCloj  
2: CALVA, Cherry, Clojure-lsp, ClojureScript, Jank, Malli, Neathderthal, noj, reagent, replicant, Shadow-cljs  
1: Babashka, Burpless,  Clay, Clojars,  clojure-mcp, ClojureDart, Compujure,  Datelevin,  Emacs, flow storm, http-kit, humble UI, info-cojure, js-interop, KIndly, metosin, pathom, Portal, promesar, eframe, Ring, spy, Tableplot, Fastmath  

### What areas of the Clojure and ClojureScript ecosystem need support?  
Many comments regarding marketing, new users, and AI are reported in sections above. The comments listed below are in addition to these themes.  
- I’d say everything that falls under the umbrella of developer experience - documentation, user-friendly tooling that minimises friction, and a comprehensive, centralised community  source of information about the ecosystem.  The last one probably needs some clarification. It would be great to have a bird’s-eye view of the ecosystem as it currently stands and where it’s heading, or ought to go. As a new user of Clojure, or as someone exploring a different area within the ecosystem, I’d like to understand which libraries or frameworks are available to meet the various needs I encounter. I want to know the current state of these libraries or frameworks - their pros and cons, key or distinguishing features, any major counterarguments against using them etc. Additionally, I’d like insight into what’s missing in the ecosystem in that particular area. Essentially, an “are we there yet?” perspective ideally with a vision and a roadmap how to get there.  
- We continue to worry about ClojureScript's dependence on the Google Closure Compiler, as this is reaching end-of-life.  It would be nice if there were a vision for the future of ClojureScript.  
- IDE support right now, with some people still working to get the old light table workflow restored (which is not a full notebook, but close - you see it in zed, but also in liquidz/Elin and in clojure sublimed), and other people exploring how to add AI assistants.	
- How to better leverage Java and JavaScript / TypeScript when there is no native Clojure / Clojurescript way to do the thing that you want to do and you don't have time/energy/knowledge to implement your own, but there is an Interop option.   
- Errors and clean common build tooling for AI agents.
- Clojure.spec, virtual thread support for core.async 
- LSP and AI tooling ecosystem
- The CLJS compiler is slow, cumbersome and doesn't play well with modern JS (ESM). Cherry is very exciting. 

### What areas of the Clojure and ClojureScript ecosystem are strong?  
- COMMUNITY
- Initiatives like this  
- Internal culture, excellent engineering practices  
- Web stack  (Metosin libs)  
- Everything else :D REPL, structural editing, editor support, strong tooling, functional programming, data-oriented etc.  
- The language itself is awesome. REPL-driven development is great.  
- It is simply the best way to build.  
- Backwards compatibility, stability of the language, the developer community.
continuity of the libraries and base. 
- Conferences  
- Continuous commitment to backwards compatibility, keeping the core library small and well considered.  
- A big part of web development; working with data given the language and its view of the world, but also some aspects of data science are starting to get interesting; innovation and experimentation 
- Mostly various component of full-stack web development  

